a.out: FILE
	@g++ FILE -std=c++17 -o a.out

.io_lock:
	@rm data/* 2> /dev/null; 			\
	mkdir -p data;						\
	python3 scripts/pull_data.py URL;	\
	touch .io_lock

.PHONY: clean
clean:
	@rm a.out .io_lock 2> /dev/null

.PHONY: manual
manual: a.out
	@./a.out

.PHONY: test
test: a.out input.txt
	@./a.out < input.txt

.PHONY: pull
pull: .io_lock
	@:

.PHONY: auto
auto: SHELL:=/bin/bash
auto: a.out .io_lock
	@mkdir -p data;									\
	for input in data/*.in; 						\
	do 												\
		id=$$(echo "$$input" | 						\
			sed "s/data\\/\(.*\)\.in/\1/g");		\
		echo Running sample input $$id;				\
		tmp=$$(echo $$input | sed 's/in/tmp/g'); 	\
		output="data/$$id.out";						\
		if ! timeout 3s								\
			./a.out < "$$input" > "$$tmp" ;			\
		then 										\
			echo Crashed / TLE!;					\
			continue;								\
		fi;											\
		pr -m -t 									\
			<(cat <(echo You) $$tmp) 				\
			<(cat <(echo Base) $$output) 			\
				2> /dev/null;						\
		echo ; 										\
	done

.PHONY: autodiff
autodiff: SHELL:=/bin/bash
autodiff: a.out .io_lock
	@mkdir -p data;									\
	for input in data/*.in; 						\
	do 												\
		id=$$(echo "$$input" | 						\
			sed "s/data\\/\(.*\)\.in/\1/g");		\
		echo Running sample input $$id;				\
		tmp=$$(echo $$input | sed 's/in/tmp/g');	\
		output="data/$$id.out";						\
		if ! timeout 3s								\
			./a.out < "$$input" > "$$tmp" ;			\
		then 										\
			echo Crashed / TLE!;					\
			continue;								\
		fi;											\
		if cmp --silent $$tmp $$output; 			\
		then echo Identical File;					\
		else diff -y 								\
			<(cat <(echo You) $$tmp) 				\
			<(cat <(echo Base) $$output);			\
		fi;											\
		echo; 										\
	done
