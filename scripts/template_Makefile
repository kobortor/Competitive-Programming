a.out: FILE
	@g++ FILE -std=c++17 -o a.out

.io_lock:
	@rm data/* 2> /dev/null; 			\
	mkdir -p data;						\
	python3 scripts/pull_data.py URL;	\
	touch .io_lock

.PHONY: clean
clean:
	@rm a.out .io_lock 2> /dev/null

.PHONY: manual
manual: a.out
	@./a.out

.PHONY: test
test: a.out input.txt
	@./a.out < input.txt

.PHONY: pull
pull: .io_lock
	@:

.PHONY: auto
auto: SHELL:=/bin/bash
auto: a.out .io_lock
	@mkdir -p data;											\
	for input in data/*.in; 								\
	do 														\
		id=$$(echo "$$input" | 								\
			sed "s/data\\/\(.*\)\.in/\1/g");				\
		printf "Running sample input $$id: ";				\
		tmp=$$(echo $$input | sed 's/in/tmp/g');			\
		output="data/$$id.out" ;							\
		timeout 3s ./a.out < "$$input" > "$$tmp";			\
		code="$$?";											\
		if [[ "$$code" -eq 124 ]]; then						\
			printf "\\033[0;33mTLE\\033[0m!\n\n";			\
			continue ;										\
		elif [[ $$code -ne 0 ]]; then						\
			printf "\\033[0;33mRTE $$code\\033[0m!\n\n";	\
			continue;										\
		fi;													\
		pr -m -t 											\
			<(cat <(echo You) $$tmp) 						\
			<(cat <(echo Base) $$output) 					\
				2> /dev/null;								\
		echo; 												\
		echo; 												\
	done

.PHONY: autodiff
autodiff: SHELL:=/bin/bash
autodiff: a.out .io_lock
	@mkdir -p data;											\
	for input in data/*.in; 								\
	do 														\
		id=$$(echo "$$input" | 								\
			sed "s/data\\/\(.*\)\.in/\1/g");				\
		printf "Running sample input $$id: ";				\
		tmp=$$(echo $$input | sed 's/in/tmp/g');			\
		output="data/$$id.out" ;							\
		timeout 3s ./a.out < "$$input" > "$$tmp";			\
		code="$$?";											\
		if [[ "$$code" -eq 124 ]]; then						\
			printf "\\033[0;33mTLE\\033[0m!\n\n";			\
			continue ;										\
		elif [[ $$code -ne 0 ]]; then						\
			printf "\\033[0;33mRTE $$code\\033[0m!\n\n";	\
			continue;										\
		fi;													\
		if cmp --silent $$tmp $$output; 					\
		then printf "\\033[0;32mAC\\033[0m";				\
		else 												\
			printf "\\033[0;31mWA\\033[0m\n";				\
			diff -y 										\
				<(cat <(echo You) $$tmp) 					\
				<(cat <(echo Base) $$output);				\
		fi;													\
		echo; 												\
	done
